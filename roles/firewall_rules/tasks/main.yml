---
#
# Set up "firewall rules"
# These are pre-assembled lists of IP addresses and ranges that can be used in service configurations
# to limit access to non-end-user-facing services
#
# Currently only supports IPv4 because our current production VLAN (128) only has IPv4 addressing
#
- name: Copy VPN rules to target
  ansible.builtin.template:
    src: vpn.conf
    dest: /var/opt/nomad/firewall_rules/vpn.conf
    owner: root
    group: root
    mode: "0444"

- name: Copy local rules to target
  ansible.builtin.template:
    src: local.conf
    dest: /var/opt/nomad/firewall_rules/local.conf
    owner: root
    group: root
    mode: "0444"

- name: Download Azure IP ranges to target
  ansible.builtin.get_url:
    url: https://download.microsoft.com/download/7/1/d/71d86715-5596-4529-9b13-da13a5de5b63/ServiceTags_Public_20250519.json
    checksum: sha512:4430b90f7e700fcbe3d401435345a3534341f031d3997ec0ee228fc7e2ee0d43722be2ba5ee4296a5b89a19cf0b6f6c8d1a05bf60951078706df14a4993588cb
    dest: /var/opt/nomad/firewall_rules/azure.json
    force: false
    owner: root
    group: root
    mode: "0444"
    use_netrc: false
    use_proxy: false

- name: Generate job JSON
  ansible.builtin.command:
    argv:
      - nomad
      - job
      - run
      - -no-color
      - -output
      - -var
      - region={{ region }}
      - -var
      - datacenter={{ datacenter }}
      - "-"
    stdin: "{{ lookup('ansible.builtin.file', './refresh-firewall-rules.nomad') }}"
  register: nomad_job_json
  changed_when: false

- name: Submit job to Nomad
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    body: "{{ nomad_job_json.stdout }}"
    body_format: json
    method: POST
    url: http://127.0.0.1:4646/v1/jobs

- name: Check if uptime-robot rules are already present
  ansible.builtin.stat:
    path: /var/opt/nomad/firewall_rules/uptime-robot.conf
  register: uptime_robot_rules

- name: Check if block-known-vendors rules are already present
  ansible.builtin.stat:
    path: /var/opt/nomad/firewall_rules/block-known-vendors.conf
  register: block_known_vendors_rules

- name: Manually launch the job to generate dynamic rules
  when: not aws_rules.stat.exists or not uptime_robot_rules.stat.exists
  block:
    - name: Force launch the job
      ansible.builtin.uri:
        follow_redirects: none
        force: true
        use_netrc: false
        use_proxy: false
        validate_certs: false
        return_content: true
        headers:
          X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
        method: POST
        url: http://127.0.0.1:4646/v1/job/refresh-firewall-rules/periodic/force
      register: force_launch_output

    - name: List allocations for evaluation
      ansible.builtin.uri:
        follow_redirects: none
        force: true
        use_netrc: false
        use_proxy: false
        validate_certs: false
        return_content: true
        headers:
          X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
        method: GET
        url: http://127.0.0.1:4646/v1/evaluation/{{ force_launch_output.json.EvalID }}/allocations
      register: evaluation_output

    - name: Wait for allocation to complete
      ansible.builtin.uri:
        follow_redirects: none
        force: true
        use_netrc: false
        use_proxy: false
        validate_certs: false
        return_content: true
        headers:
          X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
        method: GET
        url: http://127.0.0.1:4646/v1/allocation/{{ evaluation_output.json[0].ID }}
      register: allocation_output
      until: allocation_output.json.ClientStatus == "complete"
      retries: 10
      delay: 2
