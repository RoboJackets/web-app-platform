---
#
# Install Nomad, bootstrap Nomad ACL, configure Workload Identity within Consul ACL
# https://developer.hashicorp.com/nomad/tutorials/access-control/access-control-bootstrap
# https://developer.hashicorp.com/nomad/tutorials/integrate-consul/consul-acl
#
# Assumes Consul role already executed successfully
#
- name: Create /var/opt/nomad/firewall_rules/
  ansible.builtin.file:
    path: /var/opt/nomad/firewall_rules/
    state: directory
    mode: '0555'

- name: Create /root/.docker/
  ansible.builtin.file:
    path: /root/.docker/
    state: directory
    mode: '0500'

- name: Write placeholder Docker config file
  ansible.builtin.copy:
    content: "{}"
    dest: /root/.docker/config.json
    force: false
    owner: root
    group: root
    mode: '0400'

- name: Install Nomad
  ansible.builtin.yum:
    name:
    - nomad
    state: present

- name: Create /etc/systemd/system/nomad.service.d/
  ansible.builtin.file:
    path: /etc/systemd/system/nomad.service.d/
    state: directory
    mode: '0555'

- name: Write Nomad service override file
  ansible.builtin.template:
    src: override.conf
    dest: /etc/systemd/system/nomad.service.d/override.conf
    owner: root
    group: root
    mode: '0644'
  register: nomad_service_override

- name: Write Nomad configuration file
  ansible.builtin.template:
    src: nomad.hcl
    dest: /etc/nomad.d/nomad.hcl
    owner: nomad
    group: nomad
    mode: '0400'
    validate: nomad config validate %s
  register: nomad_hcl_template

- name: Stop Nomad service
  ansible.builtin.systemd_service:
    daemon_reload: true
    name: nomad
    state: stopped
    enabled: false
  when: nomad_service_override.changed or nomad_hcl_template.changed

- name: Start Nomad service
  ansible.builtin.systemd_service:
    name: nomad
    state: started
    enabled: true

- name: Wait for Nomad to be available
  ansible.builtin.wait_for:
    port: 4646
    state: started
    timeout: 10

- name: Check if Nomad token is stored in Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    return_content: true
    url: http://localhost/v1/kv/nomad/token
    status_code:
    - 200
    - 404
  register: nomad_token_present

- name: Set Nomad token as fact
  ansible.builtin.set_fact:
    nomad_token: "{{ nomad_token_present.json.0.Value | b64decode }}"
    cacheable: yes
  when: nomad_token_present.status == 200

- name: Bootstrap Nomad ACL
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    method: POST
    return_content: true
    url: http://127.0.0.1:4646/v1/acl/bootstrap
  register: nomad_bootstrap
  when: nomad_token_present.status == 404
  # the raft leader election may not have completed at this point so bootstrap may fail
  retries: 2
  delay: 5
  until: nomad_bootstrap.status == 200

- name: Set Nomad token as fact
  ansible.builtin.set_fact:
    nomad_token: "{{ nomad_bootstrap.json.SecretID }}"
    cacheable: yes
  when: nomad_token_present.status == 404

- name: Retrieve nodes from Nomad to validate Nomad is working
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    method: GET
    url: http://127.0.0.1:4646/v1/nodes

- name: Store Nomad token in Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body: "{{ ansible_facts['nomad_token'] }}"
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: PUT
    url: http://localhost/v1/kv/nomad/token
    status_code: [200]
  when: nomad_token_present.status == 404

- name: Check if GitHub Actions auth method is configured in Nomad
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    method: GET
    url: http://127.0.0.1:4646/v1/acl/auth-method/GitHubActions
    status_code:
    - 200
    - 404
  register: github_actions_auth_method

- name: Create GitHub Actions auth method in Nomad
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body:
      Name: GitHubActions
      Type: JWT
      TokenLocality: global
      TokenNameFormat: github-actions-${value.actor}-${value.repository}-${value.environment}
      MaxTokenTTL: 15m
      Default: false
      Config:
        OIDCDiscoveryURL: https://token.actions.githubusercontent.com
        ExpirationLeeway: 1m
        ClockSkewLeeway: 1m
        BoundAudiences: ["https://nomad.{{ datacenter }}.robojackets.net"]
        ClaimMappings:
          repository_id: repository_id
          repository_owner_id: repository_owner_id
          environment: environment
          actor: actor
          repository: repository
    body_format: json
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    method: POST
    url: http://127.0.0.1:4646/v1/acl/auth-method
    status_code:
    - 200
  when: github_actions_auth_method.status == 404

- name: Check if Nomad auth method is configured within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    url: http://localhost/v1/acl/auth-method/nomad
    status_code:
    - 200
    - 404
  register: auth_method_present

- name: Configure Nomad auth method within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body:
      Name: nomad
      Type: jwt
      Config:
        JWKSURL: http://127.0.0.1:4646/.well-known/jwks.json
        JWTSupportedAlgs: [RS256]
        BoundIssuer: "https://nomad.{{ datacenter }}.robojackets.net"
        BoundAudiences: ["https://consul.{{ datacenter }}.robojackets.net"]
        ClaimMappings:
          nomad_namespace: nomad_namespace
          nomad_job_id: nomad_job_id
          nomad_task: nomad_task
          nomad_service: nomad_service
    body_format: json
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: PUT
    url: http://localhost/v1/acl/auth-method
    status_code:
    - 200
    - 404
  when: auth_method_present.status == 404

- name: Check if Nomad binding rules are configured within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    url: http://localhost/v1/acl/binding-rules?authmethod=nomad
    status_code:
    - 200
  register: binding_rules

- name: Create Nomad service binding rule within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body:
      Description: Binding rule for services registered from Nomad
      AuthMethod: nomad
      Selector: >-
        "nomad_service" in value
      BindType: service
      BindName: ${value.nomad_service}
    body_format: json
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: PUT
    url: http://localhost/v1/acl/binding-rule
  when: (binding_rules.json | length) == 0

- name: Create Nomad task binding rule within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body:
      Description: Binding rule for Nomad tasks
      AuthMethod: nomad
      Selector: >-
        "nomad_service" not in value
      BindType: role
      BindName: nomad-task
    body_format: json
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: PUT
    url: http://localhost/v1/acl/binding-rule
  when: (binding_rules.json | length) == 0

- name: Check if Nomad task policy is configured within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    url: http://localhost/v1/acl/policy/name/nomad-task
    status_code:
    - 200
    - 404
  register: task_policy

- name: Create Nomad task policy within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body:
      Name: nomad-task
      Description: ACL policy used by Nomad tasks
      Rules: |
        key_prefix "" {
          policy = "read"
        }

        service_prefix "" {
          policy = "read"
        }

        node_prefix "" {
          policy = "read"
        }
    body_format: json
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: PUT
    url: http://localhost/v1/acl/policy
  when: task_policy.status == 404

- name: Check if Nomad task role is configured within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    url: http://localhost/v1/acl/role/name/nomad-task
    status_code:
    - 200
    - 404
  register: task_role

- name: Create Nomad task role within Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    body:
      Name: nomad-task
      Description: ACL role for Nomad tasks
      Policies:
      - Name: nomad-task
    body_format: json
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: PUT
    url: http://localhost/v1/acl/role
  when: task_role.status == 404
