---
#
# Deploys a private Docker Registry
# https://distribution.github.io/distribution/
#
- name: Check if htpasswd has been loaded in Consul
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    url: http://localhost/v1/kv/registry/htpasswd
    status_code:
    - 200
    - 404
  register: registry_htpasswd

- name: Configure registry credentials
  when: registry_htpasswd.status == 404
  block:

  - name: Install httpd-tools
    ansible.builtin.yum:
      name:
      - httpd-tools
      state: present

  - name: Generate registry password
    ansible.builtin.set_fact:
      registry_password: "{{ lookup('ansible.builtin.password', 'credentials/registry-password', chars=['ascii_letters', 'digits'], length=128) }}"
      cacheable: yes

  - name: Write config file so root can pull images
    ansible.builtin.template:
      src: config.json
      dest: /root/.docker/config.json
      owner: root
      group: root
      mode: '0400'

  - name: Hash password with htpasswd
    ansible.builtin.command:
      argv:
      - htpasswd
      - -nbB
      - -C
      - 17
      - robojacketsregistry
      - "{{ ansible_facts['registry_password'] }}"
    register: htpasswd_output

  - name: Store htpasswd output in Consul
    ansible.builtin.uri:
      follow_redirects: none
      force: true
      return_content: true
      unix_socket: /var/opt/nomad/run/consul.sock
      use_netrc: false
      use_proxy: false
      validate_certs: false
      body: "{{ htpasswd_output.stdout }}"
      headers:
        X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
      method: PUT
      url: http://localhost/v1/kv/registry/htpasswd
    changed_when: true

- name: Generate job submission JSON
  ansible.builtin.command:
    argv:
    - nomad
    - job
    - run
    - -no-color
    - -output
    - -var
    - region={{ region }}
    - -var
    - datacenter={{ datacenter }}
    - "-"
    stdin: "{{ lookup('ansible.builtin.file', './registry.nomad') }}"
  register: nomad_job_json
  changed_when: false

- name: Submit job to Nomad
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    body: "{{ nomad_job_json.stdout }}"
    body_format: json
    method: POST
    url: http://127.0.0.1:4646/v1/jobs
  register: job_register_output

- name: List allocations for evaluation
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    method: GET
    url: http://127.0.0.1:4646/v1/evaluation/{{ job_register_output.json.EvalID }}/allocations
  register: allocations_output

- name: Wait for container to start
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    method: GET
    url: http://127.0.0.1:4646/v1/allocation/{{ allocations_output.json[0].ID }}
  register: allocation_output
  until: allocation_output.json.TaskStates.registry.State == "running"
  retries: 5
  delay: 2
  when: (allocations_output.json | length) > 0

- name: Wait for health checks in Consul to be passing
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    return_content: true
    unix_socket: /var/opt/nomad/run/consul.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    headers:
      X-Consul-Token: "{{ ansible_facts['consul_token'] }}"
    method: GET
    url: http://localhost/v1/health/checks/registry
  register: service_status
  until: service_status.json[0].Status == "passing"
  retries: 5
  delay: 2

- name: Generate garbage collection job submission JSON
  ansible.builtin.command:
    argv:
    - nomad
    - job
    - run
    - -no-color
    - -output
    - -var
    - region={{ region }}
    - -var
    - datacenter={{ datacenter }}
    - "-"
    stdin: "{{ lookup('ansible.builtin.file', './registry-garbage-collection.nomad') }}"
  register: nomad_job_json
  changed_when: false

- name: Submit garbage collection job to Nomad
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    use_netrc: false
    use_proxy: false
    validate_certs: false
    return_content: true
    headers:
      X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
    body: "{{ nomad_job_json.stdout }}"
    body_format: json
    method: POST
    url: http://127.0.0.1:4646/v1/jobs

- name: Get mount point for registry volume
  ansible.builtin.uri:
    follow_redirects: none
    force: true
    unix_socket: /var/run/docker.sock
    use_netrc: false
    use_proxy: false
    validate_certs: false
    method: GET
    return_content: true
    url: http://localhost/v1.43/volumes/registry
  register: registry_volume

- name: Check if registry has contents
  ansible.builtin.stat:
    path: "{{ registry_volume.json.Mountpoint }}/docker/registry/v2/repositories/"
  register: registry_contents

- name: Force launch garbage collection job if registry has contents
  when: registry_contents.stat.exists
  block:

  - name: Force launch the job
    ansible.builtin.uri:
      follow_redirects: none
      force: true
      use_netrc: false
      use_proxy: false
      validate_certs: false
      return_content: true
      headers:
        X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
      method: POST
      url: http://127.0.0.1:4646/v1/job/registry-garbage-collection/periodic/force
    register: force_launch_output

  - name: List allocations for evaluation
    ansible.builtin.uri:
      follow_redirects: none
      force: true
      use_netrc: false
      use_proxy: false
      validate_certs: false
      return_content: true
      headers:
        X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
      method: GET
      url: http://127.0.0.1:4646/v1/evaluation/{{ force_launch_output.json.EvalID }}/allocations
    register: evaluation_output

  - name: Wait for allocation to complete
    ansible.builtin.uri:
      follow_redirects: none
      force: true
      use_netrc: false
      use_proxy: false
      validate_certs: false
      return_content: true
      headers:
        X-Nomad-Token: "{{ ansible_facts['nomad_token'] }}"
      method: GET
      url: http://127.0.0.1:4646/v1/allocation/{{ evaluation_output.json[0].ID }}
    register: allocation_output
    until: allocation_output.json.ClientStatus == "complete"
    retries: 5
    delay: 2
